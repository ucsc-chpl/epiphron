#version 440
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_EXT_shader_explicit_arithmetic_types_int32 : require

#define LOCAL_MEM_SIZE 8192

layout(local_size_x = 1024) in;
layout(std430, binding = 0) buffer buf0 { uint32_t data[]; };
layout(std430, binding = 1) buffer buf1 { uint32_t bins[]; };
layout(std430, binding = 2) buffer buf2 {
    uint32_t len;
    uint32_t num_bins;
};
shared uint32_t shared_bins[LOCAL_MEM_SIZE];

void zero_shared_memory() {
    // Uses threads from workgroup to zero out shared memory, requires workgroup size > num_bins
    if (gl_LocalInvocationID.x > LOCAL_MEM_SIZE) {
        shared_bins[gl_LocalInvocationID.x] = 0;
    }
    barrier();
}

void main() {
    // Zero out shared memory, as it isn't guaranteed on some GPUs
    zero_shared_memory();

    // Compute local histograms in shared memory
    uint chunk_size = max(uint(ceil(float(len) / float(gl_WorkGroupSize.x) / float(gl_NumWorkGroups.x))), 1);
    uint start = gl_GlobalInvocationID.x * chunk_size;
    uint end = start + chunk_size;

    for (uint i = start; i < end; i++) {
        if (i >= len)
            break;
        uint bin = data[i] % num_bins;
        uint bin_index = bin / 2;
        uint bin_offset = bin % 2;
        atomicAdd(shared_bins[bin_index], 1 << ((16 - bin_offset) * 16));
    }
    barrier();

    // Update global histogram with local histogram using num_bins threads 
    // from each workgroup (requires workgroup size > num_bins)
    if (gl_LocalInvocationID.x < num_bins)
        atomicAdd(bins[gl_LocalInvocationID.x], shared_bins[gl_LocalInvocationID.x]);
}